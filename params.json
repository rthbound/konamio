{"name":"Konamio","tagline":"It listens for the konami code (or whatever sequence you specify)","body":"## Konamio\r\n\r\n[![Gem Version](https://badge.fury.io/rb/konamio.png)](http://badge.fury.io/rb/konamio)  [![Build Status](https://travis-ci.org/rthbound/konamio.png?branch=master)](https://travis-ci.org/rthbound/konamio) [![Coverage Status](https://coveralls.io/repos/rthbound/konamio/badge.png)](https://coveralls.io/r/rthbound/konamio) [![Code Climate](https://codeclimate.com/github/rthbound/konamio.png)](https://codeclimate.com/github/rthbound/konamio)\r\n\r\n    gem install konamio\r\n\r\nand\r\n\r\n    require \"konamio\"\r\n\r\n\r\n### Default Usage\r\n```\r\n> Konamio::Sequence::Requisition.new.execute!\r\nEnter konami code (or hit escape)\r\nGood job, you.\r\n=> #<Konamio::Result:0x937ddb4\r\n  @data={:data=>{:confirmation=>\"Good job, you.\"}},\r\n  @success=true>\r\n```\r\n\r\n### Configuration\r\n\r\n#### Sequences\r\n\r\nYou can configure it to listen for any ascii based sequence you want. This can be specified using a string (`\"foobar\"`) or an array of recognized symbols and one character strings (escaped characters are okay, e.g. `[:up, \"1\", \"2\", \"3\", \"\\t\"]`):\r\n\r\n```ruby\r\n> Konamio::Sequence::Requisition.new({\r\n    sequence:     \"a\".upto(\"z\").to_a.reverse,\r\n    prompt:       \"Say the alphabet backwards\",\r\n    confirmation: \"Okay, you can go\"\r\n  }).execute!\r\nSay the alphabet backwards\r\nOkay, you can go\r\n=> #<Konamio::Result:0x9265788\r\n  @data={:data=>{:confirmation=>\"Okay, you can go\"}},\r\n  @success=true>\r\n```\r\n\r\n#### Output\r\n\r\nThere are three dialogs that Konamio might send to standard out.\r\n\r\n1. `:prompt` is the dialog displayed initially, and each time the user fails to supply the proper sequence.\r\n2. `:confirmation` is displayed when the required sequence is entered properly.\r\n3. `:cancellation` is displayed when user terminates by pressing the escape key.\r\n\r\nYou can customize any of these dialogs, or disable them individually by passing a falsey value.\r\n\r\n#### Success!\r\n\r\nIt would be boring if all Konamio did was return a result object. In fact, `Konamio::Sequence::Requisition#execute!` takes a block, and will execute that block when the sequence has been successfully entered. You're limited only by your imagination and the context of your application.\r\n\r\nThe following code would prompt the user to enter the konami code twice:\r\n```ruby\r\nKonamio::Sequence::Requisition.new.execute! { Konamio::Sequence::Requisition.new.execute! }\r\n```\r\nThis would give you +30 lives:\r\n```ruby\r\nKonamio::Sequence::Requisition.new.execute! { 30.times { puts \"+1up\" } }\r\n```\r\n\r\n## More fun\r\n\r\n**\"Password protect\"** your rails console by doing the following:\r\n\r\n1. Follow these [instructions](http://samuelmullen.com/2010/04/irb-global-local-irbrc/) to obtain a `.irbrc` file that loads your local `.irbrc`\r\n2. Add this gem to your rails project, then create a `.irbrc` file for the project containing\r\n\r\n\r\n```ruby\r\nrequire \"konamio\"\r\nKonamio::Sequence::Requisition.new(prompt: false, confirmation: false, cancellation: false).execute!\r\n```\r\n\r\nto require console users to enter the konami code. This funny trick obviously does not provide any real protection, but it would certainly make for a nasty practical joke.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}